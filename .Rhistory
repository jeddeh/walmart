# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, FinelineNumberNA:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, UpcNA:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
trip$UpcIndex <- as.numeric(trip$Upc)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
save.image("D:/Stats/Kaggle/walmart/xg1.RData")
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
trip.wide <- trip.wide[, Weekday:=NULL]
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
sFineline <- sparseMatrix(i = trip$VisitNumber, j = trip$FinelineIndex, x = trip$ResultCount, index1 = TRUE)
dim(trip.wide)
dim(sFineline)
sMatrix <- cbind(trip.wide, sFineline)
sTrain <- cbind(trip.wide, sFineline)[trip.wide$VisitNumber != -1, ]
sTrain <- cbind(trip.wide, sFineline)[1, ]
# Split train and test
sTrain <- cbind(trip.wide, sFineline)
sTrain[1,1]
sTrain <- cbind(trip.wide, sFineline)[1,1]
sTrain <- cbind(trip.wide, sFineline)[1,]
sTrain[1,]
a <- c(F, T, F, F, T)
c(a)
a
index(a)
a[TRUE]
which(a)
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
sFineline <- sparseMatrix(i = trip$VisitNumber, j = trip$FinelineIndex, x = trip$ResultCount, index1 = TRUE)
y <- plyr::mapvalues(trip.wide$TripType[trip.wide$TripType != -1], from = outcomes$TripType, to = outcomes$Index)
trip.wide <- trip.wide[, VisitNumber:=NULL, TripType:=NULL]
trip.wide <- trip.wide[, TripType:=NULL]
# names(train)
# [1] "TripType"              "VisitNumber"           "Weekday"
# [4] "Upc"                   "ScanCount"             "DepartmentDescription"
# [7] "FinelineNumber"
library(dplyr)
library(xgboost)
library(DiagrammeR)
library(caret)
library(corrplot)
library(stats)
library(ggplot2)
library(e1071)
# also look into slam package for sparse matricies
time.start <- Sys.time()
test.data <- read.csv("./input/test.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
library(reshape2)
library(magrittr)
library(Ckmeans.1d.dp)
# Read files
library(Rtsne)
library(data.table)
library(Matrix)
# train.data <- top_n(train.data, 1000)
train.data <- read.csv("./input/train.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
# test.data <- top_n(test.data, 1000)
# Create outcomes for xgboost
outcomes <- data.table(TripType = sort(unique(train.data$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
trip <- data.table(rbind(train.data, cbind(TripType = -1, test.data)))
## Preprocessing
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, FinelineNumberNA:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, UpcNA:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
trip$UpcIndex <- as.numeric(trip$Upc)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
# Combine train and test
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
# Convert trip data.frame from long to wide format using dcast from reshape2 package
# We want to aggregate on columns "TripType", "VisitNumber" and "Weekday"
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
load("xg1.RData")
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
# See https://www.kaggle.com/tqchen/otto-group-product-classification-challenge/understanding-xgboost-model-on-otto-data/code
# names(train)
# [1] "TripType"              "VisitNumber"           "Weekday"
# [4] "Upc"                   "ScanCount"             "DepartmentDescription"
library(reshape2)
library(xgboost)
library(Matrix)
library(DiagrammeR)
library(caret)
library(corrplot)
library(stats)
library(ggplot2)
# also look into slam package for sparse matricies
time.start <- Sys.time()
# Read files
test.data <- read.csv("./input/test.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
train.data <- read.csv("./input/train.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
library(dplyr)
library(magrittr)
library(Ckmeans.1d.dp)
library(data.table)
# [7] "FinelineNumber"
library(Rtsne)
library(e1071)
# train.data <- top_n(train.data, 1000)
# test.data <- top_n(test.data, 1000)
# Create outcomes for xgboost
outcomes <- data.table(TripType = sort(unique(train.data$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Combine train and test
trip <- data.table(rbind(train.data, cbind(TripType = -1, test.data)))
## Preprocessing
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, FinelineNumberNA:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, UpcNA:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
trip$UpcIndex <- as.numeric(trip$Upc)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
# load("xg1.RData")
# Convert trip data.frame from long to wide format using dcast from reshape2 package
# We want to aggregate on columns "TripType", "VisitNumber" and "Weekday"
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
trip.wide <- trip.wide[, Weekday:=NULL]
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
sFineline <- sparseMatrix(i = trip$VisitNumber, j = trip$FinelineIndex, x = trip$ResultCount, index1 = TRUE)
y <- plyr::mapvalues(trip.wide$TripType[trip.wide$TripType != -1], from = outcomes$TripType, to = outcomes$Index)
test.VisitNumber <- trip.wide$VisitNumber[trip.wide$VisitNumber == -1]
trip.type <- trip.wide$Triptype
trip.wide <- trip.wide[, VisitNumber:=NULL]
trip.wide <- trip.wide[, TripType:=NULL]
# Split train and test
train <- cbind( trip.wide[trip.type != -1], sFineline[trip.type != -1, ] )
train <- cbind( trip.wide[trip.type != -1, ], sFineline[trip.type != -1, ] )
# names(train)
# [1] "TripType"              "VisitNumber"           "Weekday"
# [4] "Upc"                   "ScanCount"             "DepartmentDescription"
# [7] "FinelineNumber"
library(dplyr)
library(reshape2)
library(xgboost)
library(Matrix)
library(DiagrammeR)
library(caret)
library(corrplot)
library(stats)
library(ggplot2)
library(e1071)
# also look into slam package for sparse matricies
time.start <- Sys.time()
# Read files
test.data <- read.csv("./input/test.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
# train.data <- top_n(train.data, 1000)
# test.data <- top_n(test.data, 1000)
outcomes <- data.table(TripType = sort(unique(train.data$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Combine train and test
trip <- data.table(rbind(train.data, cbind(TripType = -1, test.data)))
## Preprocessing
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, FinelineNumberNA:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, UpcNA:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
# load("xg1.RData")
# Convert trip data.frame from long to wide format using dcast from reshape2 package
trip$UpcIndex <- as.numeric(trip$Upc)
library(magrittr)
library(data.table)
# Create outcomes for xgboost
train.data <- read.csv("./input/train.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
library(Ckmeans.1d.dp)
library(Rtsne)
# We want to aggregate on columns "TripType", "VisitNumber" and "Weekday"
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
trip.wide <- trip.wide[, Weekday:=NULL]
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
train.fineline <- sparseMatrix(i = trip$VisitNumber[trip$VisitNumber != -1], j = trip$FinelineIndex[trip$VisitNumber != -1], x = trip$ResultCount, index1 = TRUE)
y <- plyr::mapvalues(trip.wide$TripType[trip.wide$TripType != -1], from = outcomes$TripType, to = outcomes$Index)
test.VisitNumber <- trip.wide$VisitNumber[trip.wide$VisitNumber == -1]
trip.wide <- trip.wide[, VisitNumber:=NULL]
trip.wide <- trip.wide[, TripType:=NULL]
test.fineline <- sparseMatrix(i = trip$VisitNumber[trip$VisitNumber == -1], j = trip$FinelineIndex[trip$VisitNumber == -1], x = trip$ResultCount, index1 = TRUE)
library(dplyr)
library(magrittr)
library(reshape2)
library(Matrix)
library(Ckmeans.1d.dp)
library(DiagrammeR)
library(corrplot)
library(Rtsne)
library(stats)
library(e1071)
# also look into slam package for sparse matricies
time.start <- Sys.time()
test.data <- read.csv("./input/test.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
# train.data <- top_n(train.data, 1000)
# Read files
library(ggplot2)
train.data <- read.csv("./input/train.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
library(caret)
library(data.table)
library(xgboost)
# test.data <- top_n(test.data, 1000)
# Create outcomes for xgboost
outcomes <- data.table(TripType = sort(unique(train.data$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Combine train and test
trip <- data.table(rbind(train.data, cbind(TripType = -1, test.data)))
## Preprocessing
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, FinelineNumberNA:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, UpcNA:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
trip$UpcIndex <- as.numeric(trip$Upc)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
# load("xg1.RData")
# Convert trip data.frame from long to wide format using dcast from reshape2 package
# We want to aggregate on columns "TripType", "VisitNumber" and "Weekday"
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
trip.wide <- trip.wide[, Weekday:=NULL]
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
train.fineline <- sparseMatrix(i = trip$VisitNumber[trip$VisitNumber != -1], j = trip$FinelineIndex[trip$VisitNumber != -1], x = trip$ResultCount, index1 = TRUE)
test.fineline <- sparseMatrix(i = trip$VisitNumber[trip$VisitNumber == -1], j = trip$FinelineIndex[trip$VisitNumber == -1], x = trip$ResultCount, index1 = TRUE)
train.fineline <- sparseMatrix(i = trip$VisitNumber[trip$VisitNumber != -1], j = trip$FinelineIndex[trip$VisitNumber != -1], x = trip$ResultCount, index1 = TRUE)
test.fineline <- sparseMatrix(i = trip$VisitNumber[trip$VisitNumber == -1], j = trip$FinelineIndex[trip$VisitNumber == -1], x = trip$ResultCount, index1 = TRUE)
train.fineline <- with(trip, sparseMatrix(i = VisitNumber[VisitNumber != -1], j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE))
test.fineline <- with(trip, sparseMatrix(i = VisitNumber[VisitNumber == -1], j = FinelineIndex[trip$VisitNumber == -1], x = ResultCount[VisitNumber == 1], index1 = TRUE))
test.fineline <- with(trip, sparseMatrix(i = VisitNumber[VisitNumber == -1], j = FinelineIndex[trip$VisitNumber == -1], x = ResultCount[VisitNumber == 1], index1 = TRUE))
train.fineline <- with(trip, sparseMatrix(i = VisitNumber[VisitNumber != -1], j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
test.fineline <- with(trip, sparseMatrix(i = VisitNumber[VisitNumber == -1], j = FinelineIndex[trip$VisitNumber == -1], x = ResultCount[VisitNumber == 1], index1 = TRUE, giveCsparse = TRUE))
class(train.fineline)
ntrain <- trip.wide[trip.wide$VisitNumber != -1]
ntest <- trip.wide[trip.wide$VisitNumber == -1]
train.fineline <- with(trip, sparseMatrix(i = 1:ntrain, j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
1:ntrain
1:5
ntrain
ntrain <- length(trip.wide[trip.wide$VisitNumber != -1])
ntest <- length(trip.wide[trip.wide$VisitNumber == -1])
train.fineline <- with(trip, sparseMatrix(i = 1:ntrain, j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
ntrain
train.fineline <- with(trip, sparseMatrix(i = 1:length(trip[VisitNumber == -1]), j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
1:length(trip[VisitNumber == -1]
)
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[VisitNumber == -1]), j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
i = 1:nrow(trip[VisitNumber == -1])
j = FinelineIndex[VisitNumber != -1]
j = trip$FinelineIndex[trip$VisitNumber != -1]
i
head(trip)
head(trip[trip$VisitNumber == -1])
# [4] "Upc"                   "ScanCount"             "DepartmentDescription"
# [7] "FinelineNumber"
library(dplyr)
library(magrittr)
library(reshape2)
library(xgboost)
library(Matrix)
library(Ckmeans.1d.dp)
library(DiagrammeR)
library(caret)
library(corrplot)
library(Rtsne)
library(stats)
library(ggplot2)
library(e1071)
library(data.table)
# also look into slam package for sparse matricies
time.start <- Sys.time()
# Read files
train.data <- read.csv("./input/train.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
test.data <- read.csv("./input/test.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
# train.data <- top_n(train.data, 1000)
# test.data <- top_n(test.data, 1000)
# Create outcomes for xgboost
outcomes <- data.table(TripType = sort(unique(train.data$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Combine train and test
trip <- data.table(rbind(train.data, cbind(TripType = -1, test.data)))
## Preprocessing
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, FinelineNumberNA:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, UpcNA:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
trip$UpcIndex <- as.numeric(trip$Upc)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
# load("xg1.RData")
# Convert trip data.frame from long to wide format using dcast from reshape2 package
# We want to aggregate on columns "TripType", "VisitNumber" and "Weekday"
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
trip.wide <- trip.wide[, Weekday:=NULL]
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[VisitNumber == -1]), j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
head(trip)
library(dplyr)
library(magrittr)
library(xgboost)
library(Matrix)
library(Ckmeans.1d.dp)
library(caret)
library(corrplot)
library(Rtsne)
library(stats)
library(DiagrammeR)
library(ggplot2)
library(e1071)
library(reshape2)
library(data.table)
# also look into slam package for sparse matricies
time.start <- Sys.time()
# Read files
train.data <- read.csv("./input/train.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
test.data <- read.csv("./input/test.csv", header = TRUE, stringsAsFactors = TRUE) %>% data.table()
# train.data <- top_n(train.data, 1000)
# test.data <- top_n(test.data, 1000)
# Create outcomes for xgboost
outcomes <- data.table(TripType = sort(unique(train.data$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Combine train and test
trip <- data.table(rbind(train.data, cbind(TripType = -1, test.data)))
tail(trip)
## Preprocessing
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
trip$FinelineNumber[is.na(trip$FinelineNumber)] <- 0
trip$Upc[is.na(trip$Upc)] <- 0
trip <- trip[, NullDescription:=ifelse(trip$DepartmentDescription == "NULL", 1, 0)]
trip <- trip[, NAFinelineNumber:= ifelse(trip$FinelineNumber == 0, 1, 0)]
trip <- trip[, NAUpc:= ifelse(trip$Upc == 0, 1, 0)]
trip$FinelineNumber <- as.factor(trip$FinelineNumber)
trip$Upc <- as.factor(trip$Upc)
trip$FinelineIndex <- as.numeric(trip$FinelineNumber)
trip$UpcIndex <- as.numeric(trip$Upc)
## Feature engineering
# Include ReturnCount column
trip$ReturnCount <- -trip$ScanCount
trip$ReturnCount[trip$ReturnCount < 0] <- 0
trip$ScanCount[trip$ScanCount < 0] <- 0
trip$ResultCount <- trip$ScanCount - trip$ReturnCount
tail(trip)
# Calculate Scan and Return counts by VisitNumber
item.counts <- summarise(group_by(trip, VisitNumber),
TotalScan = sum(ScanCount), TotalReturn = sum(ReturnCount), TotalResult = sum(ResultCount))
# save.image("D:/Stats/Kaggle/walmart/xg1.RData")
# load("xg1.RData")
# Convert trip data.frame from long to wide format using dcast from reshape2 package
# We want to aggregate on columns "TripType", "VisitNumber" and "Weekday"
trip.long <- melt.data.table(data = trip, measure.vars = c("ScanCount", "ReturnCount", "ResultCount"),
variable.name = "ItemCount")
trip.wide <- dcast.data.table(data = trip.long,
VisitNumber + TripType + Weekday ~ DepartmentDescription + ItemCount,
value.var = "value",
fun.aggregate = sum) # %>% arrange(VisitNumber)
wd <- model.matrix(~0 + Weekday, data = trip.wide)
trip.wide <- cbind(wd, trip.wide)
trip.wide <- trip.wide[, Weekday:=NULL]
trip.wide <- merge(trip.wide, item.counts, by = "VisitNumber")
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[VisitNumber == -1]), j = FinelineIndex[VisitNumber != -1], x = ResultCount[VisitNumber != -1], index1 = TRUE, giveCsparse = TRUE))
tail(trip)
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType == -1]), j = FinelineIndex[TripType != -1], x = ResultCount[TripType != -1], index1 = TRUE, giveCsparse = TRUE))
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType != -1]), j = FinelineIndex[TripType != -1], x = ResultCount[TripType != -1], index1 = TRUE, giveCsparse = TRUE))
test.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType == 1]), j = FinelineIndex[TripType == -1], x = ResultCount[TripType == 1], index1 = TRUE, giveCsparse = TRUE))
test.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType == -1]), j = FinelineIndex[TripType == -1], x = ResultCount[TripType == -1], index1 = TRUE, giveCsparse = TRUE))
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType != -1]), j = FinelineIndex[TripType != -1], x = ResultCount[TripType != -1], index1 = TRUE, giveCsparse = TRUE))
test.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType == -1]), j = FinelineIndex[TripType == -1], x = ResultCount[TripType == -1], index1 = TRUE, giveCsparse = TRUE))
y <- plyr::mapvalues(trip.wide$TripType[trip.wide$TripType != -1], from = outcomes$TripType, to = outcomes$Index)
test.VisitNumber <- trip.wide$VisitNumber[trip.wide$VisitNumber == -1]
trip.wide <- trip.wide[, VisitNumber:=NULL]
trip.wide <- trip.wide[, TripType:=NULL]
train.main <- as.matrix(trip.wide[trip.wide$TripType != -1, !names(trip.wide) == "TripType"]) %>% as("dgCMatrix") # conversion to sparse matrix
test.main <- as.matrix(trip.wide[trip.wide$TripType == -1, !names(trip.wide == "TripType")]) %>% as("dgCMatrix")
train <- cbind(train.main, train.fineline)
dim(train.main)
dim(test.main)
dim(train.fineline)
dim(test.fineline)
train.fineline <- with(trip, sparseMatrix(i = 1:nrow(trip[TripType != -1]), j = FinelineIndex, x = ResultCount[TripType != -1], index1 = TRUE, giveCsparse = TRUE))
fineline <- with(trip, sparseMatrix(i = 1:nrow(trip), j = FinelineIndex, x = ResultCount, index1 = TRUE, giveCsparse = TRUE))
train.fineline <- fineline[which(trip[trip$TripType != -1]), ]
which(trip$TripType != -1)
train.fineline <- fineline[which(trip$TripType != -1]), ]
train.fineline <- fineline[which(trip$TripType != -1), ]
y <- plyr::mapvalues(trip.wide$TripType[trip.wide$TripType != -1], from = outcomes$TripType, to = outcomes$Index)
train.fineline <- fineline[which(trip$TripType != -1), 5]
train.fineline <- fineline[which(trip$TripType != -1), ]
train.main <- as.matrix(trip.wide[trip.wide$TripType != -1, !names(trip.wide) == "TripType"]) %>% as("dgCMatrix") # conversion to sparse matrix
test.main <- as.matrix(trip.wide[trip.wide$TripType == -1, !names(trip.wide == "TripType")]) %>% as("dgCMatrix")
